{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AMJADE\\\\Rabea\\\\new-app\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Header from './Components/Layouts/Header';\nimport Layouts from './Components/Layouts';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor() {\n    super(); //this.FramedData=this.FramesByTime()\n    //const Defultdata=this.Frames(6, '2016-04-01', 9)\n\n    this.loadPoints = () => {\n      axios.get('http://localhost:3001/api/getPoints').then(({\n        data\n      }) => {\n        this.setState({\n          fkd: data\n        });\n      }).catch(err => {\n        alert(err);\n      });\n    };\n\n    this.addPoint = () => {\n      axios.post('http://localhost:3001/api/putData', {\n        id_number: 10000064,\n        badge_type_desc: \"Inf RN\",\n        start_date: 1451902509000,\n        end_date: 1451902662000,\n        x: 276.2283570392,\n        y: 995.8385104472,\n        room: \"605\",\n        floor_id: 6,\n        x_start_time: \"10:15:09\",\n        x_end_time: \"10:17:42\"\n      });\n    };\n\n    this.FramesByTime = data => {\n      const dataByTime = {};\n      data && data.forEach(point => {\n        if (point.room_num !== null) {\n          const {\n            floor_id,\n            x_start_time,\n            x_end_time\n          } = point;\n          var start = new Date(`October 13, 2014 ${x_start_time}`);\n          var end = new Date(`October 13, 2014 ${x_end_time}`);\n\n          while (start < end) {\n            //('it-IT')\n            var time = start.toLocaleTimeString('it-IT', {\n              hour: '2-digit',\n              minute: '2-digit',\n              hour12: false\n            }) + ':00_' + floor_id;\n            dataByTime[time] = dataByTime[time] ? [...dataByTime[time], point] : [point];\n            start.setSeconds(start.getSeconds() + 1);\n          }\n        }\n      });\n      return dataByTime;\n    };\n\n    this.isIntervalIncluded = (time, point) => {\n      const generatedHour = time + ':00:00';\n      const nextHour = time + 1 + ':00:00';\n      const currentDate = new Date(`October 13, 2014 ${generatedHour}`);\n      const nextDate = new Date(`October 13, 2014 ${nextHour}`);\n      const startTime = new Date(`October 13, 2014 ${point.x_start_time}`);\n      const endTime = new Date(`October 13, 2014 ${point.x_end_time}`);\n      return startTime >= currentDate && startTime <= nextDate || endTime >= currentDate && endTime <= nextDate;\n    };\n\n    this.Frames = (floor, date, time) => {\n      const generatedHour = time + ':00:00';\n      const nextHour = time + 1 + ':00:00';\n      const currentTime = new Date(`October 13, 2014 ${generatedHour}`);\n      const nextTime = new Date(`October 13, 2014 ${nextHour}`);\n      var matchingKeys = [];\n\n      while (currentTime < nextTime) {\n        const key = currentTime.toLocaleTimeString('it-IT') + '_' + floor;\n        matchingKeys.push(key);\n        currentTime.setMinutes(currentTime.getMinutes() + 1);\n      }\n\n      const data = this.FramedData;\n      const matchingFrames = {};\n      matchingKeys.map(function (key) {\n        data[key] && (matchingFrames[key] = data[key]);\n      });\n      return matchingFrames;\n    };\n\n    this.getDataByFloor = (floor_id, current = 1451898013, next = 1451898073) => {\n      axios.get('http://localhost:3001/api/getPointsByFloor', {\n        params: {\n          floor_id,\n          current,\n          next\n        }\n      }).then(({\n        data\n      }) => {\n        this.setState({\n          data,\n          selectedData: this.FramesByTime(data)\n        });\n      }).catch(err => {\n        alert(err);\n      });\n    };\n\n    this.handleOnSearch = (floor, date, time) => {\n      // const newData = data.filter(point => point.floor_id === floor && this.isIntervalIncluded(time, point) && point.Room!=null);\n      const generatedHour = time + ':00:00';\n      const nextHour = time + 1 + ':00:00';\n      const currentTime = this.toTimestamp(date, generatedHour);\n      const nextTime = this.toTimestamp(date, nextHour);\n      this.getDataByFloor(floor, currentTime, nextTime);\n    };\n\n    this.state = {\n      data: this.getDataByFloor(6),\n      hr: 9,\n      fkd: '',\n      selectedData: null\n    };\n  }\n\n  componentDidMount(prevProps, prevState, snapshot) {\n    if (!this.state.data) {\n      this.getDataByFloor(6);\n    }\n  }\n\n  toTimestamp(date, time) {\n    const currentTime = new Date(date + ' ' + time + ' GMT');\n    var datum = Date.parse(currentTime);\n    return datum / 1000;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n      handleOnSearch: this.handleOnSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Layouts, {\n      data: this.state.selectedData,\n      time: this.state.hr,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/AMJADE/Rabea/new-app/src/App.js"],"names":["React","Component","Header","Layouts","axios","App","constructor","loadPoints","get","then","data","setState","fkd","catch","err","alert","addPoint","post","id_number","badge_type_desc","start_date","end_date","x","y","room","floor_id","x_start_time","x_end_time","FramesByTime","dataByTime","forEach","point","room_num","start","Date","end","time","toLocaleTimeString","hour","minute","hour12","setSeconds","getSeconds","isIntervalIncluded","generatedHour","nextHour","currentDate","nextDate","startTime","endTime","Frames","floor","date","currentTime","nextTime","matchingKeys","key","push","setMinutes","getMinutes","FramedData","matchingFrames","map","getDataByFloor","current","next","params","selectedData","handleOnSearch","toTimestamp","state","hr","componentDidMount","prevProps","prevState","snapshot","datum","parse","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Header from './Components/Layouts/Header';\nimport Layouts from './Components/Layouts'\nimport axios from 'axios';\n\nclass App extends Component{\n    constructor(){\n        super()\n        //this.FramedData=this.FramesByTime()\n        //const Defultdata=this.Frames(6, '2016-04-01', 9)\n        this.state={\n\n            data: this.getDataByFloor(6),\n            hr: 9,\n            fkd:'',\n            selectedData: null,\n        }\n    }\n    componentDidMount(prevProps, prevState, snapshot) {\n        if(!this.state.data) {\n            this.getDataByFloor(6);\n        }\n    }\n\n    loadPoints = () => {\n        axios.get('http://localhost:3001/api/getPoints')\n            .then(({ data }) => {\n                this.setState({\n                    fkd: data,\n                })\n            })\n            .catch((err) => {\n                alert(err)\n            });\n    }\n    addPoint = () => {\n        axios.post('http://localhost:3001/api/putData', {\n            id_number: 10000064,\n            badge_type_desc: \"Inf RN\",\n            start_date: 1451902509000,\n            end_date: 1451902662000,\n            x: 276.2283570392,\n            y: 995.8385104472,\n            room: \"605\",\n            floor_id: 6,\n            x_start_time: \"10:15:09\",\n            x_end_time: \"10:17:42\"\n        });\n    }\n    \n    FramesByTime = (data) => {\n        const dataByTime = {};\n        data && data.forEach((point)=> {\n            if (point.room_num !== null){\n                const { floor_id, x_start_time, x_end_time}=point\n                var start=new Date(`October 13, 2014 ${x_start_time}`)\n                var end=new Date(`October 13, 2014 ${x_end_time}`)\n                while (start < end) {\n                    //('it-IT')\n                    var time=start.toLocaleTimeString(('it-IT'), {hour: '2-digit', minute:'2-digit', hour12: false})+':00_'+ floor_id\n                    dataByTime[time]=dataByTime[time] ? [...dataByTime[time],point] : [point]\n                    start.setSeconds(start.getSeconds() + 1);\n                }\n            }   \n         })\n        return dataByTime\n    }\n    isIntervalIncluded = (time, point) => {\n        const generatedHour = time + ':00:00';\n        const nextHour = (time+1) + ':00:00';\n        const currentDate = new Date(`October 13, 2014 ${generatedHour}`);\n        const nextDate = new Date(`October 13, 2014 ${nextHour}`);\n        const startTime = new Date(`October 13, 2014 ${point.x_start_time}`);\n        const endTime = new Date(`October 13, 2014 ${point.x_end_time}`);\n        return (startTime >= currentDate && startTime <= nextDate) ||\n            (endTime >= currentDate && endTime <= nextDate);\n    };\n    Frames = (floor, date, time) =>{\n        const generatedHour = time + ':00:00';\n        const nextHour = (time+1) + ':00:00';\n        const currentTime = new Date(`October 13, 2014 ${generatedHour}`);\n        const nextTime = new Date(`October 13, 2014 ${nextHour}`);\n        var matchingKeys=[]\n        while (currentTime < nextTime) {\n            const key=currentTime.toLocaleTimeString(('it-IT'))+'_'+ floor\n            matchingKeys.push(key)\n            currentTime.setMinutes(currentTime.getMinutes() + 1);\n        }\n        const data=this.FramedData\n        const matchingFrames = {}\n        matchingKeys.map(function(key){ \n            (data[key]) && (matchingFrames[key]= data[key])\n        });\n        return matchingFrames\n    }\n\n    getDataByFloor = (floor_id, current=1451898013, next=1451898073) => {\n        axios.get('http://localhost:3001/api/getPointsByFloor',{\n            params: {floor_id, current, next}\n        })\n            .then(({ data }) => {\n\n                this.setState({\n                    data,\n                    selectedData: this.FramesByTime(data)\n                })\n            })\n            .catch((err) => {\n                alert(err)\n            });\n    }\n    toTimestamp(date, time){\n        const currentTime = new Date(date +' '+ time + ' GMT');\n        var datum = Date.parse(currentTime);\n        return datum/1000;\n    }\n    handleOnSearch = (floor, date, time) => {\n        // const newData = data.filter(point => point.floor_id === floor && this.isIntervalIncluded(time, point) && point.Room!=null);\n        const generatedHour = time + ':00:00';\n        const nextHour = (time+1) + ':00:00';\n        const currentTime = this.toTimestamp(date,generatedHour)\n        const nextTime = this.toTimestamp(date,nextHour)\n        this.getDataByFloor(floor, currentTime, nextTime)\n    };\n    \n    render(){\n        return(\n            <>\n                <Header handleOnSearch={this.handleOnSearch}/>\n                <Layouts  data={this.state.selectedData} time={this.state.hr}/>\n            </>)\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}