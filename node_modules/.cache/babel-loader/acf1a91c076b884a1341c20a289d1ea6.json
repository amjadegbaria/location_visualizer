{"ast":null,"code":"var _jsxFileName = \"/Users/rabea/Desktop/Git/location_visualizer/src/Components/Maps/Map.js\";\nimport React, { Component } from 'react';\nimport './Map.css';\nimport Marker from '../Markers/Marker';\nimport { ReactComponent as Mapimg } from \"@svgr/webpack?-svgo,+titleProp,+ref!./6thFloorMap15.svg\";\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nexport default class extends Component {\n  constructor(props) {\n    super(props);\n\n    this.checkIn = (rooms, alarmInRooms) => {\n      // redundant code.\n      //\n      const newAlarmState = alarmInRooms;\n\n      if (this.state.checked) {\n        this.alarm(newAlarmState);\n        this.Timer.forEach(t => clearInterval(t));\n        Object.keys(alarmInRooms).map((key, index) => {\n          if (alarmInRooms[key]) {\n            newAlarmState[key] = false;\n          }\n        });\n      }\n\n      this.setState(prevState => ({ ...prevState,\n        rooms: rooms,\n        alarmInRooms: alarmInRooms\n      }));\n    };\n\n    this.alarm = receivers => {\n      Object.keys(receivers).forEach((rec, index) => {\n        this.Timer.push(setInterval(() => {\n          if (receivers[rec]) {\n            const roomElement = document.querySelector(`[data-name*=\"${rec}\"]`);\n            roomElement.classList.toggle(\"backgroundRed\");\n          }\n        }, 1500));\n      });\n    };\n\n    this.handleSwitchChange = () => {\n      debugger;\n      const newAlarmState = this.state.alarmInRooms;\n\n      if (!this.state.checked) {\n        this.alarm(newAlarmState);\n        Object.keys(this.state.alarmInRooms).map((key, index) => {\n          if (this.state.alarmInRooms[key]) {\n            newAlarmState[key] = false;\n          }\n        });\n      } else {\n        this.Timer.forEach(t => clearInterval(t));\n      }\n\n      this.setState({ ...this.state,\n        alarmInRooms: newAlarmState,\n        checked: !this.state.checked\n      });\n    };\n\n    this.state = {\n      rooms: {},\n      alarmInRooms: {},\n      checked: false\n    };\n    this.Timer = [];\n  }\n\n  componentDidUpdate(prevProps) {\n    // Typical usage (don't forget to compare props):\n    const rooms = {};\n    const alarm = {};\n\n    if (this.props.data !== prevProps.data) {\n      this.props.data.forEach(obj => {\n        rooms[obj.receiver_id] = rooms[obj.receiver_id] ? [...rooms[obj.receiver_id], obj] : [obj];\n\n        if (rooms[obj.receiver_id].length >= 2) {\n          alarm[obj.receiver_id] = true;\n        }\n      });\n      this.checkIn(rooms, alarm);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormControlLabel, {\n      control: /*#__PURE__*/React.createElement(Switch, {\n        checked: this.state.checked,\n        onChange: this.handleSwitchChange,\n        name: \"checkedA\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 30\n        }\n      }),\n      label: \"Secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Mapimg, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }\n    }), this.props && this.props.data && this.props.data.length && this.props.data.map(obj => {\n      return /*#__PURE__*/React.createElement(Marker, {\n        key: obj.id_number,\n        color: \"blue\",\n        x: obj.x,\n        y: obj.y,\n        name: obj.room_num + \" \",\n        id: obj.id_number + '',\n        receiver_desc: obj.receiver_desc + '',\n        receiver_id: obj.receiver_id + '',\n        badge: obj.badge_type_desc + '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 28\n        }\n      });\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/rabea/Desktop/Git/location_visualizer/src/Components/Maps/Map.js"],"names":["React","Component","Marker","FormControlLabel","Switch","constructor","props","checkIn","rooms","alarmInRooms","newAlarmState","state","checked","alarm","Timer","forEach","t","clearInterval","Object","keys","map","key","index","setState","prevState","receivers","rec","push","setInterval","roomElement","document","querySelector","classList","toggle","handleSwitchChange","componentDidUpdate","prevProps","data","obj","receiver_id","length","render","id_number","x","y","room_num","receiver_desc","badge_type_desc"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport './Map.css';\nimport Marker from '../Markers/Marker'\nimport { ReactComponent as Mapimg } from './6thFloorMap15.svg'\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\n\nexport default class extends Component{\n    constructor(props){\n        super(props);\n        this.state= {\n            rooms: {},\n            alarmInRooms: {},\n            checked:false,\n        }\n        this.Timer = [];\n\n    }\n    componentDidUpdate(prevProps) {\n        // Typical usage (don't forget to compare props):\n        const rooms={}\n        const alarm={}\n        if (this.props.data !== prevProps.data) {\n            this.props.data.forEach(obj => {\n                rooms[obj.receiver_id] = rooms[obj.receiver_id] ? [...rooms[obj.receiver_id], obj] : [obj]\n                if (rooms[obj.receiver_id].length >=2){\n                    alarm[obj.receiver_id]=true\n                }\n            }\n            )\n            this.checkIn(rooms,alarm)\n        }\n    }\n\n    checkIn=(rooms,alarmInRooms) => {\n        // redundant code.\n        //\n        const newAlarmState=alarmInRooms\n        if (this.state.checked) {\n            this.alarm(newAlarmState)\n            this.Timer.forEach((t)=> clearInterval(t))\n            Object.keys(alarmInRooms).map((key, index) => {\n                if (alarmInRooms[key]) {\n                    newAlarmState[key]=false\n                }\n            })\n\n        }\n        this.setState(prevState => ({\n            ...prevState,\n            rooms: rooms,\n            alarmInRooms: alarmInRooms\n        }))\n\n\n    }\n    alarm = (receivers) => {\n        Object.keys(receivers).forEach((rec, index) => {\n            this.Timer.push(setInterval(()=>{\n                    if (receivers[rec]) {\n                        const roomElement = document.querySelector(`[data-name*=\"${rec}\"]`);\n                        roomElement.classList.toggle(\"backgroundRed\")\n                    }\n            },1500))\n        })\n\n    };\n\n    handleSwitchChange = () =>{\n        debugger;\n        const newAlarmState=this.state.alarmInRooms\n        if (!this.state.checked) {\n            this.alarm(newAlarmState)\n            Object.keys(this.state.alarmInRooms).map((key, index) => {\n                if (this.state.alarmInRooms[key]) {\n                    newAlarmState[key]=false\n                }\n            })\n        }\n        else{\n            this.Timer.forEach((t)=> clearInterval(t))\n        }\n        this.setState({\n            ...this.state,\n            alarmInRooms:newAlarmState,\n            checked:!this.state.checked,\n        })\n    }\n    render(){\n\n        return(\n            <>\n                <FormControlLabel\n                    control={<Switch checked={this.state.checked} onChange={this.handleSwitchChange} name=\"checkedA\" />}\n                    label=\"Secondary\"\n                />\n                <Mapimg />\n                {this.props && this.props.data && this.props.data.length && this.props.data.map(obj=> {\n\n                    return <Marker key={obj.id_number} color='blue' x={obj.x} y={obj.y} name={obj.room_num+\" \"} id={obj.id_number + '' } receiver_desc={obj.receiver_desc+''} receiver_id={obj.receiver_id+''} badge={obj.badge_type_desc+''}  />\n                    }\n                )}\n            </>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}