{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AMJADE\\\\Rabea\\\\new-app\\\\src\\\\App.js\";\nimport React, { Component, Fragment } from 'react';\nimport Marker from './Components/Markers/Marker';\nimport Header from './Components/Layouts/Header';\nimport Footer from './Components/Layouts/Footer';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport Layouts from './Components/Layouts'; // import data from'./Components/Store'\n\nimport data from './Data/VizData.json';\nimport { Def } from './Components/Store';\nimport * as moment from 'moment';\nimport { Button } from '@material-ui/core';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.loadPoints = () => {\n      axios.get('http://localhost:3001/api/getPoints').then(({\n        data\n      }) => {\n        this.setState({\n          fkd: data\n        });\n      }).catch(err => {\n        alert(err);\n      });\n    };\n\n    this.addPoint = () => {\n      axios.post('http://localhost:3001/api/putData', {\n        id_number: 10000064,\n        badge_type_desc: \"Inf RN\",\n        start_date: 1451902509000,\n        end_date: 1451902662000,\n        x: 276.2283570392,\n        y: 995.8385104472,\n        room: \"605\",\n        floor_id: 6,\n        x_start_time: \"10:15:09\",\n        x_end_time: \"10:17:42\"\n      });\n    };\n\n    this.FramesByTime = () => {\n      const dataByTime = {};\n      data.map(point => {\n        if (point.Room != null) {\n          const {\n            floor_id,\n            x_start_time,\n            x_end_time\n          } = point;\n          var start = new Date(`October 13, 2014 ${x_start_time}`);\n          var end = new Date(`October 13, 2014 ${x_end_time}`);\n\n          while (start < end) {\n            //('it-IT')\n            var time = start.toLocaleTimeString('it-IT', {\n              hour: '2-digit',\n              minute: '2-digit',\n              hour12: false\n            }) + ':00_' + floor_id;\n            dataByTime[time] = dataByTime[time] ? [...dataByTime[time], point] : [point];\n            start.setMinutes(start.getMinutes() + 1);\n          }\n        }\n      });\n      return dataByTime;\n    };\n\n    this.isIntervalIncluded = (time, point) => {\n      const generatedHour = time + ':00:00';\n      const nextHour = time + 1 + ':00:00';\n      const currentDate = new Date(`October 13, 2014 ${generatedHour}`);\n      const nextDate = new Date(`October 13, 2014 ${nextHour}`);\n      const startTime = new Date(`October 13, 2014 ${point.x_start_time}`);\n      const endTime = new Date(`October 13, 2014 ${point.x_end_time}`);\n      return startTime >= currentDate && startTime <= nextDate || endTime >= currentDate && endTime <= nextDate;\n    };\n\n    this.Frames = (floor, date, time) => {\n      const generatedHour = time + ':00:00';\n      const nextHour = time + 1 + ':00:00';\n      const currentTime = new Date(`October 13, 2014 ${generatedHour}`);\n      const nextTime = new Date(`October 13, 2014 ${nextHour}`);\n      var matchingKeys = [];\n\n      while (currentTime < nextTime) {\n        const key = currentTime.toLocaleTimeString('it-IT') + '_' + floor;\n        matchingKeys.push(key);\n        currentTime.setMinutes(currentTime.getMinutes() + 1);\n      }\n\n      const data = this.FramedData;\n      const matchingFrames = {};\n      matchingKeys.map(function (key) {\n        data[key] && (matchingFrames[key] = data[key]);\n      });\n      return matchingFrames;\n    };\n\n    this.getDataByFloor = (floor_id, current = 1451898013, next = 1451901638) => {\n      axios.get('http://localhost:3001/api/getPointsByFloor', {\n        params: {\n          floor_id,\n          current,\n          next\n        }\n      }).then(({\n        data\n      }) => {\n        this.setState({ ...this.state.data,\n          fkd: data\n        });\n      }).catch(err => {\n        alert(err);\n      });\n    };\n\n    this.handleOnSearch = (floor, date, time) => {\n      // const newData = data.filter(point => point.floor_id === floor && this.isIntervalIncluded(time, point) && point.Room!=null);\n      const generatedHour = time + ':00:00';\n      const nextHour = time + 1 + ':00:00';\n      const currentTime = this.toTimestamp(date, generatedHour);\n      const nextTime = this.toTimestamp(date, nextHour);\n      this.getDataByFloor(floor, currentTime, nextTime);\n    };\n\n    this.FramedData = this.FramesByTime();\n    const Defultdata = this.Frames(6, '2016-04-01', 9);\n    this.state = {\n      selectedData: Defultdata,\n      hr: 9,\n      fkd: ''\n    };\n  }\n\n  componentDidMount() {\n    this.loadPoints();\n  }\n\n  toTimestamp(date, time) {\n    const currentTime = new Date(date + ' ' + time + ' GMT');\n    var datum = Date.parse(currentTime);\n    return datum / 1000;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(MuiThemeProvider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      handleOnSearch: this.handleOnSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Layouts, {\n      data: this.state.selectedData,\n      time: this.state.hr,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.getDataByFloor(6),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }\n    }, \"click\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/AMJADE/Rabea/new-app/src/App.js"],"names":["React","Component","Fragment","Marker","Header","Footer","MuiThemeProvider","Layouts","data","Def","moment","Button","axios","App","constructor","loadPoints","get","then","setState","fkd","catch","err","alert","addPoint","post","id_number","badge_type_desc","start_date","end_date","x","y","room","floor_id","x_start_time","x_end_time","FramesByTime","dataByTime","map","point","Room","start","Date","end","time","toLocaleTimeString","hour","minute","hour12","setMinutes","getMinutes","isIntervalIncluded","generatedHour","nextHour","currentDate","nextDate","startTime","endTime","Frames","floor","date","currentTime","nextTime","matchingKeys","key","push","FramedData","matchingFrames","getDataByFloor","current","next","params","state","handleOnSearch","toTimestamp","Defultdata","selectedData","hr","componentDidMount","datum","parse","render"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from 'react';\nimport Marker from './Components/Markers/Marker';\nimport Header from './Components/Layouts/Header';\nimport Footer from './Components/Layouts/Footer';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport Layouts from './Components/Layouts'\n// import data from'./Components/Store'\nimport data from './Data/VizData.json'\nimport {Def} from './Components/Store';\nimport * as moment from 'moment';\nimport {Button} from '@material-ui/core'\nimport axios from 'axios';\n\nclass App extends Component{\n    constructor(){\n        super()\n        this.FramedData=this.FramesByTime()\n        const Defultdata=this.Frames(6, '2016-04-01', 9)\n        this.state={\n            selectedData: Defultdata,\n            hr: 9,\n            fkd:''\n        }\n    }\n    componentDidMount() {\n        this.loadPoints();\n    }\n\n    loadPoints = () => {\n        axios.get('http://localhost:3001/api/getPoints')\n            .then(({ data }) => {\n                this.setState({\n                    fkd: data,\n                })\n            })\n            .catch((err) => {\n                alert(err)\n            });\n    }\n    addPoint = () => {\n        axios.post('http://localhost:3001/api/putData', {\n            id_number: 10000064,\n            badge_type_desc: \"Inf RN\",\n            start_date: 1451902509000,\n            end_date: 1451902662000,\n            x: 276.2283570392,\n            y: 995.8385104472,\n            room: \"605\",\n            floor_id: 6,\n            x_start_time: \"10:15:09\",\n            x_end_time: \"10:17:42\"\n        });\n    }\n    \n    FramesByTime = () => {\n        const dataByTime = {};\n        data.map((point)=> {\n            if (point.Room!=null){\n                const { floor_id, x_start_time, x_end_time}=point\n                var start=new Date(`October 13, 2014 ${x_start_time}`)\n                var end=new Date(`October 13, 2014 ${x_end_time}`)\n                while (start < end) {\n                    //('it-IT')\n                    var time=start.toLocaleTimeString(('it-IT'), {hour: '2-digit', minute:'2-digit', hour12: false})+':00_'+ floor_id\n                    dataByTime[time]=dataByTime[time] ? [...dataByTime[time],point] : [point]\n                    start.setMinutes(start.getMinutes() + 1);\n                }\n            }   \n         })\n        return dataByTime\n    }\n    isIntervalIncluded = (time, point) => {\n        const generatedHour = time + ':00:00';\n        const nextHour = (time+1) + ':00:00';\n        const currentDate = new Date(`October 13, 2014 ${generatedHour}`);\n        const nextDate = new Date(`October 13, 2014 ${nextHour}`);\n        const startTime = new Date(`October 13, 2014 ${point.x_start_time}`);\n        const endTime = new Date(`October 13, 2014 ${point.x_end_time}`);\n        return (startTime >= currentDate && startTime <= nextDate) ||\n            (endTime >= currentDate && endTime <= nextDate);\n    };\n    Frames = (floor, date, time) =>{\n        const generatedHour = time + ':00:00';\n        const nextHour = (time+1) + ':00:00';\n        const currentTime = new Date(`October 13, 2014 ${generatedHour}`);\n        const nextTime = new Date(`October 13, 2014 ${nextHour}`);\n        var matchingKeys=[]\n        while (currentTime < nextTime) {\n            const key=currentTime.toLocaleTimeString(('it-IT'))+'_'+ floor\n            matchingKeys.push(key)\n            currentTime.setMinutes(currentTime.getMinutes() + 1);\n        }\n        const data=this.FramedData\n        const matchingFrames = {}\n        matchingKeys.map(function(key){ \n            (data[key]) && (matchingFrames[key]= data[key])\n        });\n        return matchingFrames\n    }\n\n    getDataByFloor = (floor_id, current=1451898013, next=1451901638) => {\n        axios.get('http://localhost:3001/api/getPointsByFloor',{\n            params: {floor_id, current, next}\n        })\n            .then(({ data }) => {\n                this.setState({\n                    ...this.state.data,\n                    fkd: data\n                })\n            })\n            .catch((err) => {\n                alert(err)\n            });\n    }\n    toTimestamp(date, time){\n        const currentTime = new Date(date +' '+ time + ' GMT');\n        var datum = Date.parse(currentTime);\n        return datum/1000;\n    }\n    handleOnSearch = (floor, date, time) => {\n        // const newData = data.filter(point => point.floor_id === floor && this.isIntervalIncluded(time, point) && point.Room!=null);\n        const generatedHour = time + ':00:00';\n        const nextHour = (time+1) + ':00:00';\n        const currentTime = this.toTimestamp(date,generatedHour)\n        const nextTime = this.toTimestamp(date,nextHour)\n        this.getDataByFloor(floor, currentTime, nextTime)\n    };\n    \n    render(){\n        return(\n            <Fragment>\n                <MuiThemeProvider>\n                <Header handleOnSearch={this.handleOnSearch}/>\n                <Layouts  data={this.state.selectedData} time={this.state.hr}/>\n                <button onClick={() => this.getDataByFloor(6)}>click</button>\n                </MuiThemeProvider>\n            </Fragment>       \n             )\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}