{"ast":null,"code":"var _jsxFileName = \"/Users/rabea/Desktop/Git/location_visualizer/src/App.js\";\nimport React, { Component } from 'react';\nimport Header from './Components/Layouts/Header';\nimport Layouts from './Components/Layouts';\nimport axios from 'axios';\nimport './app.scss';\nimport * as turf from '@turf/turf';\n\nclass App extends Component {\n  constructor() {\n    super(); //this.FramedData=this.FramesByTime()\n    //const Defultdata=this.Frames(6, '2016-04-01', 9)\n\n    this.loadPoints = () => {\n      axios.get('http://localhost:3001/api/getPoints').then(({\n        data\n      }) => {\n        this.setState({\n          fkd: data\n        });\n      }).catch(err => {\n        alert(err);\n      });\n    };\n\n    this.addPoint = () => {\n      axios.post('http://localhost:3001/api/putData', {\n        id_number: 10000064,\n        badge_type_desc: \"Inf RN\",\n        start_date: 1451902509000,\n        end_date: 1451902662000,\n        x: 276.2283570392,\n        y: 995.8385104472,\n        room: \"605\",\n        floor_id: 6,\n        x_start_time: \"10:15:09\",\n        x_end_time: \"10:17:42\"\n      });\n    };\n\n    this.getPosition = receiver => {\n      const roomElement = document.querySelector(`[data-name*=\"${receiver}\"]`);\n      let x = 0,\n          y = 0;\n\n      if (roomElement) {\n        const rect = roomElement.getBoundingClientRect();\n\n        do {\n          x = Math.random() * (rect.right - rect.left * 1.01) + rect.left;\n          y = Math.random() * (rect.bottom * 0.99 - rect.top) + rect.top;\n          var point = turf.point([x, y]);\n          var poly = rect.toGeoJSON();\n          var inside = turf.inside(point, poly);\n        } while (inside);\n      }\n\n      return {\n        x,\n        y\n      };\n    };\n\n    this.FramesByTime = data => {\n      const dataByTime = {};\n      data && data.forEach(point => {\n        if (point.receiver_id !== null) {\n          const {\n            floor_id,\n            start_time,\n            end_time,\n            receiver_id\n          } = point;\n          let pos = this.getPosition(receiver_id);\n          point.x = pos.x;\n          point.y = pos.y;\n          var start = start_time;\n\n          while (start < end_time) {\n            dataByTime[start] = dataByTime[start] ? [...dataByTime[start], point] : [point];\n            start += 1;\n          }\n        }\n      });\n      return dataByTime;\n    };\n\n    this.isIntervalIncluded = (time, point) => {\n      const generatedHour = time + ':00:00';\n      const nextHour = time + 1 + ':00:00';\n      const currentDate = new Date(`October 13, 2014 ${generatedHour}`);\n      const nextDate = new Date(`October 13, 2014 ${nextHour}`);\n      const startTime = new Date(`October 13, 2014 ${point.x_start_time}`);\n      const endTime = new Date(`October 13, 2014 ${point.x_end_time}`);\n      return startTime >= currentDate && startTime <= nextDate || endTime >= currentDate && endTime <= nextDate;\n    };\n\n    this.Frames = (floor, date, time) => {\n      const generatedHour = time + ':00:00';\n      const nextHour = time + 1 + ':00:00';\n      const currentTime = new Date(`October 13, 2014 ${generatedHour}`);\n      const nextTime = new Date(`October 13, 2014 ${nextHour}`);\n      var matchingKeys = [];\n\n      while (currentTime < nextTime) {\n        const key = currentTime.toLocaleTimeString('it-IT') + '_' + floor;\n        matchingKeys.push(key);\n        currentTime.setMinutes(currentTime.getMinutes() + 1);\n      }\n\n      const data = this.FramedData;\n      const matchingFrames = {};\n      matchingKeys.map(function (key) {\n        data[key] && (matchingFrames[key] = data[key]);\n      });\n      return matchingFrames;\n    };\n\n    this.getDataByFloor = (floor_id, time, current = 1451898000, next = 1451901600) => {\n      axios.get('http://localhost:3001/api/getPointsByFloor', {\n        params: {\n          floor_id,\n          current,\n          next\n        }\n      }).then(({\n        data\n      }) => {\n        this.setState({\n          data,\n          hr: time,\n          millseconds: current,\n          selectedData: this.FramesByTime(data)\n        });\n      }).catch(err => {\n        alert(err);\n      });\n    };\n\n    this.handleOnSearch = (floor, date, time) => {\n      // const newData = data.filter(point => point.floor_id === floor && this.isIntervalIncluded(time, point) && point.Room!=null);\n      const generatedHour = time + ':00:00';\n      const nextHour = time + 1 + ':00:00';\n      const currentTime = this.toTimestamp(date, generatedHour);\n      const nextTime = this.toTimestamp(date, nextHour);\n      this.getDataByFloor(floor, time, currentTime, nextTime);\n    };\n\n    this.state = {\n      data: this.getDataByFloor(6, 9),\n      hr: 9,\n      millseconds: '',\n      selectedData: null\n    };\n  }\n\n  toTimestamp(date, time) {\n    const currentTime = new Date(date + ' ' + time + ' GMT');\n    var datum = Date.parse(currentTime);\n    return datum / 1000;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"global-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      handleOnSearch: this.handleOnSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Layouts, {\n      data: this.state.selectedData,\n      millseconds: this.state.millseconds,\n      time: this.state.hr,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/rabea/Desktop/Git/location_visualizer/src/App.js"],"names":["React","Component","Header","Layouts","axios","turf","App","constructor","loadPoints","get","then","data","setState","fkd","catch","err","alert","addPoint","post","id_number","badge_type_desc","start_date","end_date","x","y","room","floor_id","x_start_time","x_end_time","getPosition","receiver","roomElement","document","querySelector","rect","getBoundingClientRect","Math","random","right","left","bottom","top","point","poly","toGeoJSON","inside","FramesByTime","dataByTime","forEach","receiver_id","start_time","end_time","pos","start","isIntervalIncluded","time","generatedHour","nextHour","currentDate","Date","nextDate","startTime","endTime","Frames","floor","date","currentTime","nextTime","matchingKeys","key","toLocaleTimeString","push","setMinutes","getMinutes","FramedData","matchingFrames","map","getDataByFloor","current","next","params","hr","millseconds","selectedData","handleOnSearch","toTimestamp","state","datum","parse","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Header from './Components/Layouts/Header';\nimport Layouts from './Components/Layouts'\nimport axios from 'axios';\nimport './app.scss';\nimport * as turf from '@turf/turf'\n\nclass App extends Component{\n    constructor(){\n        super()\n        //this.FramedData=this.FramesByTime()\n        //const Defultdata=this.Frames(6, '2016-04-01', 9)\n        this.state={\n\n            data: this.getDataByFloor(6, 9),\n            hr: 9,\n            millseconds:'',\n            selectedData: null,\n        }\n    }\n\n    loadPoints = () => {\n        axios.get('http://localhost:3001/api/getPoints')\n            .then(({ data }) => {\n                this.setState({\n                    fkd: data,\n                })\n            })\n            .catch((err) => {\n                alert(err)\n            });\n    }\n    addPoint = () => {\n        axios.post('http://localhost:3001/api/putData', {\n            id_number: 10000064,\n            badge_type_desc: \"Inf RN\",\n            start_date: 1451902509000,\n            end_date: 1451902662000,\n            x: 276.2283570392,\n            y: 995.8385104472,\n            room: \"605\",\n            floor_id: 6,\n            x_start_time: \"10:15:09\",\n            x_end_time: \"10:17:42\"\n        });\n    }\n    getPosition = (receiver) => {\n        const roomElement = document.querySelector(`[data-name*=\"${receiver}\"]`);\n        let x = 0, y =0 ;\n        if (roomElement) {\n            const rect = roomElement.getBoundingClientRect();\n            do {\n                x = Math.random() * (rect.right - (rect.left * 1.01)) + rect.left;\n                y = Math.random() * ((rect.bottom * 0.99) - rect.top) + rect.top;\n                var point = turf.point([x, y]);\n                var poly = rect.toGeoJSON();\n                var inside = turf.inside(point, poly);\n            } while (inside);\n        }\n        return {x, y}\n    };\n\n    FramesByTime = (data) => {\n        const dataByTime = {};\n        data && data.forEach((point)=> {\n            if (point.receiver_id !== null){\n                const { floor_id, start_time, end_time,receiver_id }=point\n                let pos= this.getPosition(receiver_id)\n                point.x=pos.x\n                point.y=pos.y\n                var start=start_time\n                while (start < end_time) {\n                    dataByTime[start]=dataByTime[start] ? [...dataByTime[start],point] : [point]\n                    start += 1\n                }\n            }   \n         })\n        return dataByTime\n    }\n    isIntervalIncluded = (time, point) => {\n        const generatedHour = time + ':00:00';\n        const nextHour = (time+1) + ':00:00';\n        const currentDate = new Date(`October 13, 2014 ${generatedHour}`);\n        const nextDate = new Date(`October 13, 2014 ${nextHour}`);\n        const startTime = new Date(`October 13, 2014 ${point.x_start_time}`);\n        const endTime = new Date(`October 13, 2014 ${point.x_end_time}`);\n        return (startTime >= currentDate && startTime <= nextDate) ||\n            (endTime >= currentDate && endTime <= nextDate);\n    };\n    Frames = (floor, date, time) =>{\n        const generatedHour = time + ':00:00';\n        const nextHour = (time+1) + ':00:00';\n        const currentTime = new Date(`October 13, 2014 ${generatedHour}`);\n        const nextTime = new Date(`October 13, 2014 ${nextHour}`);\n        var matchingKeys=[]\n        while (currentTime < nextTime) {\n            const key=currentTime.toLocaleTimeString(('it-IT'))+'_'+ floor\n            matchingKeys.push(key)\n            currentTime.setMinutes(currentTime.getMinutes() + 1);\n        }\n        const data=this.FramedData\n        const matchingFrames = {}\n        matchingKeys.map(function(key){ \n            (data[key]) && (matchingFrames[key]= data[key])\n        });\n        return matchingFrames\n    }\n\n    getDataByFloor = (floor_id, time ,current= 1451898000, next=1451901600) => {\n        axios.get('http://localhost:3001/api/getPointsByFloor',{\n            params: {floor_id, current, next}\n        })\n            .then(({ data }) => {\n\n                this.setState({\n                    data,\n                    hr:time,\n                    millseconds:current,\n                    selectedData: this.FramesByTime(data)\n                })\n            })\n            .catch((err) => {\n                alert(err)\n            });\n    }\n    toTimestamp(date, time){\n        const currentTime = new Date(date +' '+ time + ' GMT');\n        var datum = Date.parse(currentTime);\n        return datum/1000;\n    }\n    handleOnSearch = (floor, date, time) => {\n        // const newData = data.filter(point => point.floor_id === floor && this.isIntervalIncluded(time, point) && point.Room!=null);\n        const generatedHour = time + ':00:00';\n        const nextHour = (time+1) + ':00:00';\n        const currentTime = this.toTimestamp(date,generatedHour)\n        const nextTime = this.toTimestamp(date,nextHour)\n\n        this.getDataByFloor(floor,time, currentTime, nextTime)\n    };\n    \n    render(){\n        return(\n            <div className='global-container'>\n                <Header handleOnSearch={this.handleOnSearch}/>\n                <Layouts  data={this.state.selectedData} millseconds={this.state.millseconds} time={this.state.hr}/>\n            </div>)\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}